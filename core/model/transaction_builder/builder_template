/*
Copyright Soramitsu Co., Ltd. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/*
  This code is used for creating builder header file only.
*/
#define REPLACE_STRING(str) #str

#define BUILDER_BEGIN(Command, ObjectType) \
template<>  \
class TransactionBuilder<Command<object::ObjectType>> { \
public: \
  \
  TransactionBuilder() = default; \
  TransactionBuilder(const TransactionBuilder&) = default;  \
  TransactionBuilder(TransactionBuilder&&) = default;

#define BUILDER_SET_SENDER \
  TransactionBuilder& setSender(std::string sender) { \
    _sender = std::move(sender);  \
    return *this; \
  }

#define BUILDER_BUILD_BASIS(Command, ObjectType)  \
  TransactionBuilder& set ## ObjectType(object::ObjectType object) {  \
    _object = std::move(object);  \
    return *this; \
  } \
  \
  object::ObjectType build() {  \
    const auto unsetMembers = enumerateUnsetMembers();  \
    if (not unsetMembers.empty()) { \
      throw exception::transaction::UnsetBuildArgmentsException(REPLACE_STRING(Command##<object::##ObjectType##>), unsetMembers); \
    } \
    \
    return _object;\
  }

#define BUILDER_UNSET_MEMBERS_BEGIN \
private:  \
  \
  std::string enumerateUnsetMembers() {    \
    std::string ret;  \
    if (_sender.empty()) ret += " " + "sender";  \
    if (_object.empty()) ret += " " + "object";

#define BUILDER_UNSET_MEMBERS_CUSTOM_MEMBER(member, defaultCondition) \
    if (_ ## member ## defaultCondition) ret += " " + REPLACE_STRING(member);

#define BUILDER_UNSET_MEMBERS_END \
    return ret; \
  }

#define BUILDER_MEMBERS(ObjectType) \
  std::string _sender;  \
  object::ObjectType _object;

#define BUILDER_CUSTOM_MEMBER(type,name) \
  type _##name;

#define BUILDER_END  \
};
BUILDER_BEGIN(__CommandType__,__ObjectType__)
BUILDER_SET_SENDER
BUILDER_BUILD_BASIS(__CommandType__,__ObjectType__)
BUILDER_UNSET_MEMBERS_BEGIN
BUILDER_UNSET_MEMBERS_END
BUILDER_MEMBERS(__ObjectType__)
BUILDER_END
/*
Require: clang-format

Usage:

BUILDER_BEGIN(Add,Domain)
BUILDER_SET_SENDER
BUILDER_BUILD_BASIS(Add,Domain)
BUILDER_UNSET_MEMBERS_BEGIN
BUILDER_UNSET_MEMBERS_CUSTOM_MEMBER(myStr,.empty())
BUILDER_UNSET_MEMBERS_CUSTOM_MEMBER(myInt, < 0)
BUILDER_UNSET_MEMBERS_END
BUILDER_MEMBERS(Domain)
BUILDER_CUSTOM_MEMBER(std::string,myStr)
BUILDER_CUSTOM_MEMBER(int,myInt)
BUILDER_END

Then, type console:

./compile_builder_hpp.sh [add_domain]

Preprocessing error will occur but the output code is correct.

*/